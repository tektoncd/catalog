---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pytest
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Testing
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: python, pytest
    tekton.dev/displayName: pytest
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
    tekton.dev/deprecated: "true"
spec:
  description: >-
    This task will run pytest on the provided input.

  workspaces:
    - name: source
  params:
    - name: PYTHON
      description: The used Python version, more precisely the tag for the Python image
      type: string
      default: "latest"
    - name: ARGS
      description: The additional arguments to be used with pytest
      type: string
      default: ""
    - name: SOURCE_PATH
      description: The path to the source code
      default: "."
    - name: REQUIREMENTS_FILE
      description: The name of the requirements file inside the source location, with fallback to the requirements file in the root location
      default: "requirements.txt"
  steps:
    - name: unit-test
      image: docker.io/python:$(inputs.params.PYTHON)
      workingDir: $(workspaces.source.path)
      script: |
        export PATH=$PATH:$HOME/.local/bin

        if [ -e "$(inputs.params.SOURCE_PATH)"/"$(inputs.params.REQUIREMENTS_FILE)" ];
        then
          pip install -r "$(inputs.params.SOURCE_PATH)"/"$(inputs.params.REQUIREMENTS_FILE)"
          pip show pytest || {
            printf "###\nWarning: Pytest is missing in your test requirements file\n###";
            pip install pytest
          }
        else
          if [ -e "$(inputs.params.REQUIREMENTS_FILE)" ];
          then
            pip install -r "$(inputs.params.REQUIREMENTS_FILE)"
          fi
          pip install pytest
        fi
        if [ -z "$(inputs.params.ARGS)" ]; then
          pytest "$(inputs.params.SOURCE_PATH)"
        else
          pytest $(inputs.params.ARGS) "$(inputs.params.SOURCE_PATH)"
        fi
